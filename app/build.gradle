apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'jacoco'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.memoizrlabs.jeeter"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "TWEETER_CONSUMER_KEY", TWEETER_CONSUMER_KEY
        buildConfigField "String", "TWEETER_CONSUMER_SECRET", TWEETER_CONSUMER_SECRET
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // DI
    compile 'com.github.memoizr:shank:v0.1.12'

    // Android Support
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:recyclerview-v7:23.1.0'
    compile 'com.android.support:design:23.1.0'
    compile 'com.android.support:support-annotations:23.1.0'

    // Image Loading
    compile 'com.squareup.picasso:picasso:2.5.2'

    // Logger
    compile 'com.orhanobut:logger:1.11'

    // Networking
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.facebook.stetho:stetho:1.2.0'
    compile 'com.facebook.stetho:stetho-okhttp:1.2.0'

    // Reactive Extensions
    compile 'io.reactivex:rxkotlin:0.22.14'
    compile 'io.reactivex:rxandroid:1.0.0'
    compile 'com.jakewharton.rxbinding:rxbinding-support-v4:0.2.0'

    // Twitter
    compile 'com.twitter.sdk.android:twitter:1.7.2'

    // Test
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.1'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.1'
    testCompile 'org.powermock:powermock-api-support:1.6.1'
    testCompile 'org.powermock:powermock-api-mockito:1.6.1'
    testCompile 'org.powermock:powermock-classloading-xstream:1.6.1'

    // BDD
    testCompile 'info.cukes:cucumber-core:1.2.2'
    testCompile 'info.cukes:cucumber-java:1.2.2'
    testCompile 'info.cukes:cucumber-junit:1.2.2'
    testCompile 'info.cukes:cucumber-picocontainer:1.2.3'

    // UI tests
    testCompile 'org.robolectric:robolectric:3.0'

    provided 'org.projectlombok:lombok:1.12.6'
    compile 'org.picocontainer:picocontainer:2.15'
}

jacoco {
    toolVersion '0.7.1.201405082137'
    reportsDir = file('$buildDir/customJacocoReportDir')
}

def coverageSourceDirs = [
        './src/main/java',
]

task jacocoTestReport(type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml {
            enabled = true
            destination "${buildDir}/reports/jacoco/jacocoReport.xml"
        }
        csv.enabled false
        html {
            enabled true
            destination "${buildDir}/reports/jacoco/html"
        }
    }

    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                        '**/model/*',
                       '**/*Module*.*',
                       '**/*Decoration.*',
                       '**/*Data.*',
                       '**/*$$*.class', // retrolambda classes
                       '**/BuildConfig.*',
                       '**/Manifest*.*'
            ]
    )
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("./build/jacoco/testDebugUnitTest.exec")
}

